name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install Backend Dependencies
      run: |
        cd backend
        npm ci
    
    - name: Run Backend Tests
      run: |
        cd backend
        npm test
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/taskmanager-test
        JWT_SECRET: test-secret-key
        REDIS_URL: redis://localhost:6379
    
    - name: Run Backend Linting
      run: |
        cd backend
        npm run lint || true

  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run Frontend Tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
      env:
        CI: true
    
    - name: Run Frontend Linting
      run: |
        cd frontend
        npm run lint
    
    - name: Build Frontend
      run: |
        cd frontend
        npm run build
      env:
        VITE_API_URL: http://localhost:5000/api

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Run Security Audit
      run: |
        cd backend && npm audit --audit-level moderate
        cd ../frontend && npm audit --audit-level moderate

  # Docker Build Test
  docker-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Backend Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: task-manager-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build Frontend Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: task-manager-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging (on develop branch)
  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: [backend-test, frontend-test, security-scan, docker-test]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
        # Example: docker-compose -f docker-compose.staging.yml up -d

  # Deploy to Production (on main branch)
  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: [backend-test, frontend-test, security-scan, docker-test]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/
        # Example: docker-compose -f docker-compose.prod.yml up -d

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Artillery
      run: npm install -g artillery
    
    - name: Run Performance Tests
      run: |
        artillery run tests/performance/load-test.yml
      env:
        API_URL: http://localhost:5000/api